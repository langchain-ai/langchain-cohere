interactions:
- request:
    body: '{"model": "command-r-plus", "messages": [{"role": "system", "content":
      "## Task And Context\nYou are an agent designed to interact with a SQL database.\nGiven
      an input question, create a syntactically correct sqlite query to run, then
      look at the results of the query and return the answer.\nUnless the user specifies
      a specific number of examples they wish to obtain, always limit your query to
      at most 10 results.\nYou can order the results by a relevant column to return
      the most interesting examples in the database.\nNever query for all the columns
      from a specific table, only ask for the relevant columns given the question.\nYou
      have access to tools for interacting with the database.\nOnly use the below
      tools. Only use the information returned by the below tools to construct your
      final answer.\nYou MUST double check your query before executing it. If you
      get an error while executing a query, rewrite the query and try again.\nDO NOT
      make any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.\nIf
      the question does not seem related to the database, just return \"I don''t know\"
      as the answer.\nThe current date is Wednesday, January 22, 2025 17:50:27\n\n##
      Style Guide\nUnless the user asks for a different style of answer, you should
      answer in full sentences, using proper grammar and spelling\n"}, {"role": "user",
      "content": "Please look at the tables in the database to see what you can query.
      Then you should query the schema of the most relevant tables."}, {"role": "user",
      "content": "which employee has the highest salary?"}], "tools": [{"type": "function",
      "function": {"name": "sql_db_query", "description": "Input to this tool is a
      detailed and correct SQL query, output is a result from the database. If the
      query is not correct, an error message will be returned. If an error is returned,
      rewrite the query, check the query, and try again. If you encounter an issue
      with Unknown column ''xxxx'' in ''field list'', use sql_db_schema to query the
      correct table fields.", "parameters": {"type": "object", "properties": {"query":
      {"type": "string", "description": "A detailed and correct SQL query."}}, "required":
      ["query"]}}}, {"type": "function", "function": {"name": "sql_db_schema", "description":
      "Input to this tool is a comma-separated list of tables, output is the schema
      and sample rows for those tables. Be sure that the tables actually exist by
      calling sql_db_list_tables first! Example Input: table1, table2, table3", "parameters":
      {"type": "object", "properties": {"table_names": {"type": "string", "description":
      "A comma-separated list of the table names for which to return the schema. Example
      input: ''table1, table2, table3''"}}, "required": ["table_names"]}}}, {"type":
      "function", "function": {"name": "sql_db_list_tables", "description": "Input
      is an empty string, output is a comma-separated list of tables in the database.",
      "parameters": {"type": "object", "properties": {"tool_input": {"type": "string",
      "description": "An empty string"}}, "required": []}}}, {"type": "function",
      "function": {"name": "sql_db_query_checker", "description": "Use this tool to
      double check if your query is correct before executing it. Always use this tool
      before executing a query with sql_db_query!", "parameters": {"type": "object",
      "properties": {"query": {"type": "string", "description": "A detailed and SQL
      query to be checked."}}, "required": ["query"]}}}], "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3420'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.2
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.13.11
    method: POST
    uri: https://api.cohere.com/v2/chat
  response:
    body:
      string: 'event: message-start

        data: {"id":"18de8f9b-2640-4b5b-9497-9eeb5d95568d","type":"message-start","delta":{"message":{"role":"assistant","content":[],"tool_plan":"","tool_calls":[],"citations":[]}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":"I"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" will"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" first"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" list"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" the"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" tables"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" in"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" the"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" database"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":"."}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" Then"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":","}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" I"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" will"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" query"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" the"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" schema"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" of"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" the"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" table"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" that"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" contains"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" employee"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" salary"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" information"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":"."}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" Finally"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":","}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" I"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" will"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" write"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" and"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" execute"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" a"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" query"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" to"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" find"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" the"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" employee"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" with"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" the"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" highest"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":" salary"}}}


        event: tool-plan-delta

        data: {"type":"tool-plan-delta","delta":{"message":{"tool_plan":"."}}}


        event: tool-call-start

        data: {"type":"tool-call-start","index":0,"delta":{"message":{"tool_calls":{"id":"sql_db_list_tables_4dxzxwsj7fkz","type":"function","function":{"name":"sql_db_list_tables","arguments":""}}}}}


        event: tool-call-end

        data: {"type":"tool-call-end","index":0}


        event: message-end

        data: {"type":"message-end","delta":{"finish_reason":"TOOL_CALL","usage":{"billed_units":{"input_tokens":581,"output_tokens":52},"tokens":{"input_tokens":1427,"output_tokens":81}}}}


        data: [DONE]


        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - text/event-stream
      date:
      - Wed, 22 Jan 2025 17:50:27 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - f27ed8d1b922e98ac832149177ca91c9
      x-endpoint-monthly-call-limit:
      - '1000'
      x-envoy-upstream-service-time:
      - '29'
      x-trial-endpoint-call-limit:
      - '40'
      x-trial-endpoint-call-remaining:
      - '39'
    status:
      code: 200
      message: OK
version: 1
